#!/usr/bin/env ruby
require "uri"
require "mechanize"
require 'open-uri'
require 'thread'

if ARGV.size != 2
	$stderr.puts "download TS file decoded by Uliza style video streaming"
	$stderr.puts "ulizadl <playlist.m3u8> <output(.ts)>"
	exit 1
end

m3u8 = ARGV.shift
ts_file = "#{ARGV.shift}.ts"

begin
	agent = Mechanize.new
	agent.user_agent_alias = 'Windows Chrome'
	agent.verify_mode = OpenSSL::SSL::VERIFY_NONE
	agent.get(m3u8)
	body = agent.page.body
rescue ArgumentError
	body = open(m3u8, &:read)
end
tses = body.scan(/.*\.ts.*/)
key_url = body.scan(/URI="(.*)"/).flatten.first

if key_url
	key = agent.get_file(key_url)
	decoder = OpenSSL::Cipher.new('aes-128-cbc')
	decoder.key = key
	decoder.decrypt
else
	decoder = ''
	def decoder.update(s); return s; end
	def decoder.final(); return ''; end
end

q = Queue.new
tses.each_with_index{|ts, i| q.push([ts, i])}
q.close

threads = []
results = [nil] * q.size
stats = [0] * 3
3.times do |t|
	threads << Thread.start(t) do |t|
		while (ts, i = q.pop)
			begin
				sleep(rand(0.1) * 3)
				results[i] = agent.get_file(ts)
				stats[t] = i
			rescue Mechanize::ResponseCodeError => e
				case e.response_code
				when "403" # Forbidden
					stats[t] = -2
					retry
				when "429" # TooManyRequests
					stats[t] = -3
					retry
				else
					raise # TODO: catch other errors
				end
			end
		end
	end
end

open(ts_file, 'wb:ASCII-8BIT') do |ts|
	results.each_with_index do |data, i|
		loop do
			if data
				ts.write(decoder.update(data))
				results[i] = nil # be saved data want to GC
				print "#{i+1}/#{tses.size} saved --"
				stats.each_with_index{|v, t| print " T#{t+1}:#{v+1}"}
				print "\r"
				break
			else
				sleep(1.0) # wait for complete of chunk download finished
				data = results[i]
			end
		end
	end
	ts.write(decoder.final)
	puts
end

threads.each{|t| t.join}
