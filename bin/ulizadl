#!/usr/bin/env ruby
require "uri"
require "mechanize"
require 'open-uri'
require 'thread'

if ARGV.size != 2
	$stderr.puts "download TS file decoded by Uliza style video streaming"
	$stderr.puts "ulizadl <playlist.m3u8> <output(.ts)>"
	exit 1
end

m3u8 = ARGV.shift
ts_file = "#{ARGV.shift}.ts"

begin
	agent = Mechanize.new
	agent.user_agent_alias = 'Windows Chrome'
	agent.verify_mode = OpenSSL::SSL::VERIFY_NONE
	agent.get(m3u8)
	body = agent.page.body
rescue ArgumentError
	body = open(m3u8, &:read)
end
tses = body.scan(/.*\.ts.*/)
key_url = body.scan(/URI="(.*)"/).flatten.first

if key_url
	key = agent.get_file(key_url)
	decoder = OpenSSL::Cipher.new('aes-128-cbc')
	decoder.key = key
	decoder.decrypt
else
	decoder = ''
	def decoder.update(s); return s; end
	def decoder.final(); return ''; end
end

q = Queue.new
tses.each_with_index{|ts_url, block_no| q.push([ts_url, block_no])}
q.close
results = [nil] * q.size

msgs = Queue.new
stats = [0] * 3
stats.size.times do |thread_no|
	Thread.start(thread_no) do |thread_no|
		while (ts_url, block_no = q.pop)
			begin
				sleep(rand(0.1) * 3)
				results[block_no] = agent.get_file(ts_url)
				stats[thread_no] = block_no
			rescue Mechanize::ResponseCodeError => e
				case e.response_code
				when "403" # Forbidden
					msgs.push "T#{thread_no}: 403 Forbidden"
					retry
				when "429" # TooManyRequests
					msgs.push "T#{thread_no}: 429 TooManyRequests"
					retry
				else
					msgs.push "T#{thread_no}: #{e}"
					retry # TODO: catch other status code
				end
			rescue
				msgs.push "T#{thread_no}: #{e.class} #{e}"
				break
			end
		end
	end
end

def print_status(block, tses, stats, msgs)
	$stderr.puts msgs.pop while !msgs.empty?
	print "#{block+1}/#{tses.size} saved --"
	stats.each_with_index{|block_no, thread_no| print " T#{thread_no+1}:#{block_no+1}"}
	print "\r"
end

open(ts_file, 'wb:ASCII-8BIT') do |ts|
	results.each_with_index do |data, i|
		print_status(i, tses, stats, msgs)
		loop do
			if data
				ts.write(decoder.update(data))
				results[i] = nil # be saved data want to GC
				break
			else
				sleep(1.0) # wait for complete of chunk download finished
				data = results[i]
			end
		end
	end
	ts.write(decoder.final)
	puts
end
